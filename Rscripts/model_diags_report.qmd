---
title: "Pelagic Model Checks"
author: "Modified by: Michelle Sculley, Developed by: Marc Nadon and Meg Oshima"
date: "`r Sys.Date()`"
format: html
params: 
  species: "SWO"
  scenario: "base"
  profile: "SR_LN(R0)"
  profile_vec: !expr c(2,4,0.1)
  Njitter: !expr 2
---

```{r setup}
#| include: false
knitr::opts_chunk$set(echo = FALSE,
                      message = FALSE, 
                      warning=FALSE)
library(this.path)
library(r4ss)
library(ss3diags)
library(tidyverse)
library(gt)
library(ggplot2)
library(reshape2)


```

**This is a summary report for the `r params$species` `r params$scenario` model run.**

```{r}

report. <- SS_output(dir = getwd(), verbose = FALSE, printstats = FALSE)

```

# Model Output

::: panel-tabset
## Input Data

```{r }
#| label: dataplot
SSplotData(report.,subplots = 2, pheight=8,pwidth=10, margins = c(5.1,2.1,2.1,18.1), ptsize=6)
```

## Convergence Check

```{r}
data.frame(Converged = file.exists(file.path(getwd(), "ss.std")), 
           MaxGrad = report.$maximum_gradient_component)

report.$warnings
```



## CPUE Fit

```{r}
#| label: indexfits
#| fig-show: hold
#| message: false
#| fig-align: center

n.indices <- length(unique(report.$cpue$Fleet))
SSrmse(report., quants = "cpue")$RMSE %>% gt()
CPUE<-report.$cpue %>% 
  select(Fleet, Fleet_name, Yr,Seas,Obs,Exp,SE)
 sspar(mfrow = c(1,1))
## this figure doesn't plot if its included in the if statement below. Why??


if(n.indices > 0){
   # report.$index_variance_tuning_check %>% 
   # select(Fleet, fleetname, N, RMSE, VarAdj, New_VarAdj) %>% 
   # gt()

   sspar(mfrow =c(1,2), mai = c(.6,.6,.1,.1))

 SSplotIndices(report., subplots = 2,verbose = F, mainTitle=T) # this figure doesn't work if fleets is specified  
 sspar(mfrow=c(1,1))
for(i in 1:n.indices){
  ylim <- SSrunstest(report., quants = "cpue", verbose = F)

 sspar(mfrow = c(1,2),mai = c(.6,.6,.1,.1))
  SSplotRunstest(report., subplots = "cpue", add = TRUE, indexselect = i, 
                 ylim = c(min(ylim$sigma3.lo), max(ylim$sigma3.hi)), verbose = F)
}

  sspar(mfrow = c(1,1))

  SSplotJABBAres(report., subplots = "cpue", add = TRUE, seas=TRUE, ylim = c(-.5, .5),verbose=FALSE)

  }else{
    print("No CPUE included in model")
 }

```

## Length Comp Fit

```{r}
n.comps <- length(unique(report.$lendbase$Fleet))
SSrmse(report., quants = "len")$RMSE %>% gt()
```

```{r}
#| label: lenfits
#| fig-show: hold
#| message: false
#| fig-align: center
FrancisW<-data.frame("fleet"=NA,"mean"=NA,"LCI"=NA,"UCI"=NA)
if (n.comps>0){
for (i in 1:n.comps){
ylim <- SSrunstest(report., quants = "len", verbose = F)
sspar(mfrow = c(1,2), omi = c(.35,.3,.1,.1), mai = c(.6,.55,.1,.1))
temp<-SSMethod.TA1.8(report., type = "len", set.pars = F, fleet = i, printit = F, plotadj = F)
if(!is.null(temp)){
  FrancisW[i,]<-c(i,temp)
  }
SSplotRunstest(report., subplots = "len", add = TRUE, indexselect = i, 
               ylim = c(min(ylim$sigma3.lo), max(ylim$sigma3.hi)), verbose = F)
} 

     sspar(mfrow = c(1,1))
     SSplotJABBAres(report., subplots = "len", add = TRUE, seas=TRUE, ylim = c(-.5, .5),verbose=FALSE)
FrancisW %>% 
  gt() %>%
  tab_header(title="Francis data weighting",subtitle= "method TA1.8")

} else {
  print("No Size Comp included in the model")
}

```

```{r}
#| label: lencompfits
#| fig-align: center
for (i in 1:n.comps){
sspar(mfrow = c(1,2), omi = c(.35,.3,.1,.1), mai = c(.6,.55,.1,.1))
SSplotComps(report., subplots = 21, fleets = i,verbose=FALSE)
SSplotComps(report., subplots = 24, fleets = i,verbose=FALSE)
}
```

## Retrospective and Hindcasting

### Retrospective

```{r }
#| message: false
#| eval: true
#| error: true
#| label: retrospectives
if(dir.exists(file.path(getwd(), "Retrospectives"))){
  
   retro.dirs <- list.files(file.path(getwd(), "Retrospectives"))
  n.retro <- length(retro.dirs)
  peel <- seq(0,-n.retro+1)
  retro.vec <- c()
  for(i in seq_along(peel)){
    retro.vec[i] <- paste0("retro", peel[i])
  }
  retro.dirs <- paste0(file.path(getwd(), "Retrospectives"), "/", retro.vec)
  
  mod.retro <- SSgetoutput(dirvec = retro.dirs, verbose = FALSE)
  
  retrosum <- SSsummarize(mod.retro)
retrocomp <- SSretroComps(mod.retro)

sspar(mfrow = c(1,2))
SSplotRetro(retrosum,
            forecast = F,
            add=T,
            showrho = F,
            subplots = c("SSB", "F")[1], 
            verbose=FALSE, 
            legendloc = "bottomright")

SSplotRetro(retrosum,
            forecast = F,
            add=T,
            showrho = F,
            subplots = c("SSB", "F")[2],
            legend = F, 
            verbose=FALSE)

SSplotRetro(retrosum,
            xmin=2000,
            forecastrho = T,
            add=T,
            subplots = c("SSB", "F")[1],
            legend = F, 
            verbose=FALSE)

SSplotRetro(retrosum,
            xmin=2000,
            add=T,
            forecastrho = T,
            subplots = c("SSB", "F")[2],
            legend = F, 
            verbose=FALSE)

}else{
  print("No retrospective runs were found")
}

```

### Hindcasting

```{r}
#| label: hindcast
#| eval: true
#| error: true

if(dir.exists(file.path(getwd(), "Retrospectives"))){
 if(n.indices==1&n.comps==1){ 
  sspar(mfrow = c(1,2))
  SSplotHCxval(retrosum, subplots = "cpue", add = TRUE, indexselect = 1, legendloc = "bottomleft")
  SSplotHCxval(retrocomp, subplots = "len", add = TRUE, indexselect = 1, legend = F)
 } else {
  ## can use this if you have multiple indices or length comp fleets
   for(i in 1:n.indices){
     sspar(mfrow = c(1,1))
     SSplotHCxval(retrosum, subplots = "cpue", add = TRUE, indexselect = i)
   }
   
   for(i in 1:n.comps){
     sspar(mfrow = c(1,1))
     SSplotHCxval(retrocomp, subplots = "len", add = TRUE, indexselect = i)
   }
 }
}else{
  print("No information for hindcast was found")
  
}

```

## Recruitment Deviations

```{r}
#| label: recdevs
SSplotRecdevs(report., subplots = c(2,3))

# bias adjustment information
report.$breakpoints_for_bias_adjustment_ramp %>% 
 rownames_to_column("col2") %>%
  pivot_longer(cols = -col2, names_to = "param", values_to = "value") %>%
  select(param, value) %>%
   gt() %>% 
   tab_header(title="Bias Adjustment") %>%
   fmt_number(columns = vars(value)) 
  
```

## Likelihood Profile

```{r }
#| label: r0prof
if(dir.exists(file.path(getwd(), paste0(params$profile, "_profile")))){

  Nprofile <- length(params$profile_vec)
  profile.str <- substr(params$profile, start=1, stop=5)
  print(profile.str)
  # read the output files (with names like Report1.sso, Report2.sso, etc.)
  profile.dirs <- file.path(getwd(), paste0(params$profile, "_profile"))
  profilemodels <- SSgetoutput(dirvec = profile.dirs,
                               keyvec = 1:Nprofile, verbose = FALSE)
 # # summarize output
  profilesummary <- SSsummarize(profilemodels, verbose = FALSE)
 # 
 # # OPTIONAL COMMANDS TO ADD MODEL WITH PROFILE PARAMETER ESTIMATED
 # 
  
  profilemodels[["MLE"]] <- report.
  profilesummary <- SSsummarize(profilemodels, verbose = FALSE)
  # END OPTIONAL COMMANDS
 # 
 # # plot profile using summary created above
  tryCatch({SSplotProfile(profilesummary, # summary object
    profile.string = profile.str, # substring of profile parameter
    profile.label = params$profile
  )}, error=function(e) {
    print("Error:\n")
    print("Skipping SSplotProfile")
  })
 # 
  PinerPlot(profilesummary, component = "Surv_like",
            profile.string = profile.str,
            profile.label = params$profile,
            main = "Changes in survey likelihood by fleet")

    PinerPlot(profilesummary, component = "Length_like",
            profile.string = profile.str,
            profile.label = params$profile,
            main = "Changes in Length Comp likelihood by fleet")  
  delta.like <- profilesummary$likelihoods %>% 
    filter(str_detect(Label, "TOTAL")) %>% 
    pivot_longer(cols = -Label) %>%
    mutate(delta.like = value - 346.095) %>% 
    filter(str_detect(name, "MLE", negate = T)) %>% 
    mutate(linf = params$profile_vec)
  
  b0 <- profilesummary$SpawnBio %>% 
    filter(str_detect(Label, "SSB_Virgin")) %>% 
    select(-c(Yr, MLE)) %>% 
    pivot_longer(cols = -c(Label))
  
  delta.like %>% 
    left_join(b0, by = "name") %>% 
    ggplot(aes(y = value.y,x = linf, colour = linf)) + 
    geom_point()+ 
    labs(y = "B0") +
    theme_classic()
  
  delta.like %>% 
    left_join(b0, by = "name") %>% 
    ggplot(aes(y = delta.like,x = value.y, colour = linf)) + 
    geom_point()+ 
    labs(x = "B0", y = "Change in Likelihood") +
    theme_classic()

 }else{
   print0("No likelihood runs were found")

}



```

## Management Quantities

```{r }
#| label: mvlnkb
if(report.$log_det_hessian>0){
mvln <- SSdeltaMVLN(report.)
SSplotEnsemble(mvln$kb, subplots = c("stock", "harvest", "SSB", "F"), add = TRUE)
dev.off()} else {
  print("Hessian is not positive definite, covariance necessary for these plots")
}

```

## Jitter

```{r}
#| label: jitter

if(dir.exists(file.path(getwd(), "jitter"))){
  
  jittermods <- SSgetoutput(keyvec=1:params$Njitter,
                            dirvec=file.path(getwd(), "jitter"),
                            getcomp=FALSE, getcovar=F, verbose =FALSE)
  jittermods[["base"]] <- SS_output(file.path(getwd()),
                                    verbose = FALSE, printstats = FALSE)
  jittersum <- SSsummarize(jittermods, verbose = FALSE)

  baselike <- jittersum$likelihoods %>%
    select(base, Label) %>%
    filter(str_detect(Label, "TOTAL")) %>%
    pull(base)

  
 likes <- jittersum$likelihoods %>%
    pivot_longer(cols = -Label, names_to = "Run", values_to = "Likelihood") %>%
    filter(str_detect(Label, "TOTAL")) %>%
    mutate(Run = seq(1, params$Njitter + 1)) %>%
    ggplot(aes(x = Run, y = Likelihood)) +
    geom_point() +
    geom_hline(yintercept = baselike) +
    theme_classic()

  likes
  
}else{
  print("No jitter runs were found.")
}
  
```

```{r }
#| label: model-comparisons
if(dir.exists(file.path(getwd(), "jitter"))){
   SSplotComparisons(jittersum, subplots = c(1,7,9), new = F, legend = F)
}
```
## ASPM

```{r}
#| label: aspm-run
if(dir.exists(file.path(getwd(), "ASPM"))){
ASPM<-SS_output(file.path(getwd(),"ASPM"),verbose=FALSE, printstats = FALSE)
ASPM_compare<-SSsummarize(list(ASPM,report.), verbose=FALSE)

SSplotComparisons(ASPM_compare,
  legendlabels = c("ASPM", "Reference"),
  subplots = c(1,7,14), new = F
)


}

```


## Selectivity 

```{r}
#| label: selectivity


sspar(mfrow = c(1,1))
SSplotSelex(report., subplots = c(1), mainTitle = F)
SSplotSelex(report., subplots = c(2), mainTitle = F)
sspar(mfrow = c(1,2))
SSplotSelex(report.,subplots=c(3), sexes=1)
SSplotSelex(report.,subplots=c(9), sexes=1)
```


## Biology

```{r}
#| label: maturity

birthseas<-report.$birthseas[2]
#sspar(mfrow = c(1,2), mai = c(.6,.6,.1,.1))
SSplotBiology(report., subplots = c(6))
SSplotBiology(report., subplots = c(8))
SSplotBiology(report., subplots = c(1), seas=birthseas)
```
EOF

:::
